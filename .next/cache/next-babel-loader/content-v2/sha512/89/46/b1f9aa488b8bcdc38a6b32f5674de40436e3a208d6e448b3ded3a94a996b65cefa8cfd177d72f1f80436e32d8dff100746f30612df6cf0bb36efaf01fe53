{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/raudipra/Documents/Projects/Portfolio/portfolio-cms-fe/components/Forms/ImageUploader.js\";\nimport React from \"react\";\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/lib/ReactCrop.scss';\n\nfunction ImageUploader() {\n  const [src, setSrc] = React.useState(\"\");\n  const [crop, setCrop] = React.useState({\n    unit: \"%\",\n    width: 30,\n    aspect: 1 / 1\n  });\n  const [croppedImage, setCroppedImage] = React.useState(null);\n  const [imageRef, setImageRef] = React.useState(null);\n\n  const handleFile = e => {\n    const fileReader = new FileReader();\n\n    fileReader.onloadend = () => {\n      setSrc(fileReader.result);\n    };\n\n    fileReader.readAsDataURL(e.target.files[0]);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('user[profile_pic]', croppedImage);\n    addPhotoToUser(user, formData);\n  };\n\n  const onImageLoaded = image => {\n    setImageRef(image);\n  };\n\n  const onCropChange = crop => {\n    setCrop(crop);\n  };\n\n  const onCropComplete = crop => {\n    if (imageRef && crop.width && crop.height) {\n      getCroppedImg(imageRef, crop);\n    }\n  };\n\n  const getCroppedImg = (image, crop) => {\n    const canvas = document.createElement(\"canvas\");\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    const reader = new FileReader();\n    canvas.toBlob(blob => {\n      reader.readAsDataURL(blob);\n\n      reader.onloadend = () => {\n        dataURLtoFile(reader.result, 'cropped.jpg');\n      };\n    });\n  };\n\n  const dataURLtoFile = (dataurl, filename) => {\n    let arr = dataurl.split(','),\n        mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]),\n        n = bstr.length,\n        u8arr = new Uint8Array(n);\n\n    while (n--) {\n      u8arr[n] = bstr.charCodeAt(n);\n    }\n\n    let croppedImageTemp = new File([u8arr], filename, {\n      type: mime\n    });\n    setCroppedImage(croppedImageTemp);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"profile_pic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      id: \"profile_pic\",\n      value: profile_pic,\n      onChange: handleFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), src && /*#__PURE__*/_jsxDEV(ReactCrop, {\n      src: src,\n      crop: crop,\n      onImageLoaded: onImageLoaded,\n      onComplete: onCropComplete,\n      onChange: onCropChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n}\n\nexport default ImageUploader;","map":{"version":3,"sources":["/Users/raudipra/Documents/Projects/Portfolio/portfolio-cms-fe/components/Forms/ImageUploader.js"],"names":["React","ReactCrop","ImageUploader","src","setSrc","useState","crop","setCrop","unit","width","aspect","croppedImage","setCroppedImage","imageRef","setImageRef","handleFile","e","fileReader","FileReader","onloadend","result","readAsDataURL","target","files","handleSubmit","preventDefault","formData","FormData","append","addPhotoToUser","user","onImageLoaded","image","onCropChange","onCropComplete","height","getCroppedImg","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","reader","toBlob","blob","dataURLtoFile","dataurl","filename","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","croppedImageTemp","File","type","profile_pic"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactCrop from 'react-image-crop'\nimport 'react-image-crop/lib/ReactCrop.scss'\n\nfunction ImageUploader() {\n    const [src, setSrc] = React.useState(\"\");\n    const [crop, setCrop] = React.useState({\n        unit: \"%\",\n        width: 30,\n        aspect: 1 / 1\n    });\n    const [croppedImage, setCroppedImage] = React.useState(null);\n    const [imageRef, setImageRef] = React.useState(null);\n    \n    const handleFile = e => {\n        const fileReader = new FileReader()\n        fileReader.onloadend = () => {\n            setSrc(fileReader.result)\n        }   \n        fileReader.readAsDataURL(e.target.files[0])\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault()\n        const formData = new FormData()\n            \n        formData.append('user[profile_pic]', croppedImage)\n\n        addPhotoToUser(user, formData)\n    }\n\n    const onImageLoaded = image => {\n        setImageRef(image)\n    }\n\n    const onCropChange = (crop) => {\n        setCrop(crop);\n    }\n\n    const onCropComplete = crop => {\n        if (imageRef && crop.width && crop.height) {\n            getCroppedImg(imageRef, crop)\n        }\n    }\n\n    const getCroppedImg = (image, crop) => {\n        const canvas = document.createElement(\"canvas\");\n        const scaleX = image.naturalWidth / image.width;\n        const scaleY = image.naturalHeight / image.height;\n        canvas.width = crop.width;\n        canvas.height = crop.height;\n        const ctx = canvas.getContext(\"2d\");\n        \n        ctx.drawImage(\n            image,\n            crop.x * scaleX,\n            crop.y * scaleY,\n            crop.width * scaleX,\n            crop.height * scaleY,\n            0,\n            0,\n            crop.width,\n            crop.height\n        )\n\n        const reader = new FileReader()\n        canvas.toBlob(blob => {\n            reader.readAsDataURL(blob)\n            reader.onloadend = () => {\n                dataURLtoFile(reader.result, 'cropped.jpg')\n            }\n        })\n    }\n\n    const dataURLtoFile = (dataurl, filename) => {\n        let arr = dataurl.split(','),\n            mime = arr[0].match(/:(.*?);/)[1],\n            bstr = atob(arr[1]), \n            n = bstr.length, \n            u8arr = new Uint8Array(n);\n                \n        while(n--){\n            u8arr[n] = bstr.charCodeAt(n);\n        }\n        let croppedImageTemp = new File([u8arr], filename, {type:mime});\n        setCroppedImage(croppedImageTemp) \n    }\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <label htmlFor=\"profile_pic\"></label>\n            <input type='file' id='profile_pic' value={profile_pic} \n            onChange={handleFile} />\n            {src && (\n                <ReactCrop\n                src={src}\n                crop={crop}\n                onImageLoaded={onImageLoaded}\n                onComplete={onCropComplete}\n                onChange={onCropChange}\n                /> \n            )}\n            <button>save</button>\n        </Form>\n    );\n}\n\nexport default ImageUploader;"]},"metadata":{},"sourceType":"module"}