{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/raudipra/Documents/Projects/Portfolio/portfolio-cms-fe/components/Forms/ImageUploader.js\";\nimport React, { useState, useRef, useEffect, DependencyList } from 'react';\nimport ReactCrop, { centerCrop, makeAspectCrop, Crop, PixelCrop } from 'react-image-crop';\nimport { canvasPreview } from './canvasPreview';\nimport 'react-image-crop/dist/ReactCrop.css'; // This is to demonstate how to make and center a % aspect crop\n// which is a bit trickier so we use some helper functions.\n\nfunction centerAspectCrop(mediaWidth, mediaHeight, aspect) {\n  return centerCrop(makeAspectCrop({\n    unit: '%',\n    width: 90\n  }, aspect, mediaWidth, mediaHeight), mediaWidth, mediaHeight);\n}\n\nfunction useDebounceEffect(fn, waitTime, deps) {\n  useEffect(() => {\n    const t = setTimeout(() => {\n      fn.apply(undefined, deps);\n    }, waitTime);\n    return () => {\n      clearTimeout(t);\n    };\n  }, deps);\n}\n\nfunction ImageUploader() {\n  const {\n    0: imgSrc,\n    1: setImgSrc\n  } = useState('');\n  const previewCanvasRef = useRef(null);\n  const imgRef = useRef(null);\n  const {\n    0: crop,\n    1: setCrop\n  } = useState();\n  const {\n    0: completedCrop,\n    1: setCompletedCrop\n  } = useState();\n  const {\n    0: scale,\n    1: setScale\n  } = useState(1);\n  const {\n    0: rotate,\n    1: setRotate\n  } = useState(0);\n  const {\n    0: aspect,\n    1: setAspect\n  } = useState(16 / 9);\n\n  function onSelectFile(e) {\n    if (e.target.files && e.target.files.length > 0) {\n      setCrop(undefined); // Makes crop preview update between images.\n\n      const reader = new FileReader();\n      reader.addEventListener('load', () => {\n        var _reader$result;\n\n        return setImgSrc(((_reader$result = reader.result) === null || _reader$result === void 0 ? void 0 : _reader$result.toString()) || '');\n      });\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  }\n\n  function onImageLoad(e) {\n    if (aspect) {\n      const {\n        width,\n        height\n      } = e.currentTarget;\n      setCrop(centerAspectCrop(width, height, aspect));\n    }\n  }\n\n  useDebounceEffect(async () => {\n    if (completedCrop !== null && completedCrop !== void 0 && completedCrop.width && completedCrop !== null && completedCrop !== void 0 && completedCrop.height && imgRef.current && previewCanvasRef.current) {\n      // We use canvasPreview as it's much faster than imgPreview.\n      canvasPreview(imgRef.current, previewCanvasRef.current, completedCrop, scale, rotate);\n    }\n  }, 100, [completedCrop, scale, rotate]);\n\n  function handleToggleAspectClick() {\n    if (aspect) {\n      setAspect(undefined);\n    } else if (imgRef.current) {\n      const {\n        width,\n        height\n      } = imgRef.current;\n      setAspect(16 / 9);\n      setCrop(centerAspectCrop(width, height, 16 / 9));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Crop-Controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: onSelectFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"scale-input\",\n          children: \"Scale: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"scale-input\",\n          type: \"number\",\n          step: \"0.1\",\n          value: scale,\n          disabled: !imgSrc,\n          onChange: e => setScale(Number(e.target.value))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"rotate-input\",\n          children: \"Rotate: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"rotate-input\",\n          type: \"number\",\n          value: rotate,\n          disabled: !imgSrc,\n          onChange: e => setRotate(Math.min(180, Math.max(-180, Number(e.target.value))))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleToggleAspectClick,\n          children: [\"Toggle aspect \", aspect ? 'off' : 'on']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), !!imgSrc && /*#__PURE__*/_jsxDEV(ReactCrop, {\n      crop: crop,\n      onChange: (_, percentCrop) => setCrop(percentCrop),\n      onComplete: c => setCompletedCrop(c),\n      aspect: aspect,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        ref: imgRef,\n        alt: \"Crop me\",\n        src: imgSrc,\n        style: {\n          transform: `scale(${scale}) rotate(${rotate}deg)`\n        },\n        onLoad: onImageLoad\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: !!completedCrop && /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: previewCanvasRef,\n        style: {\n          border: '1px solid black',\n          objectFit: 'contain',\n          width: completedCrop.width,\n          height: completedCrop.height\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n\nexport default ImageUploader;","map":{"version":3,"sources":["/Users/raudipra/Documents/Projects/Portfolio/portfolio-cms-fe/components/Forms/ImageUploader.js"],"names":["React","useState","useRef","useEffect","DependencyList","ReactCrop","centerCrop","makeAspectCrop","Crop","PixelCrop","canvasPreview","centerAspectCrop","mediaWidth","mediaHeight","aspect","unit","width","useDebounceEffect","fn","waitTime","deps","t","setTimeout","apply","undefined","clearTimeout","ImageUploader","imgSrc","setImgSrc","previewCanvasRef","imgRef","crop","setCrop","completedCrop","setCompletedCrop","scale","setScale","rotate","setRotate","setAspect","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","result","toString","readAsDataURL","onImageLoad","height","currentTarget","current","handleToggleAspectClick","Number","value","Math","min","max","_","percentCrop","c","transform","border","objectFit"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, DependencyList } from 'react'\n\nimport ReactCrop, {\n  centerCrop,\n  makeAspectCrop,\n  Crop,\n  PixelCrop,\n} from 'react-image-crop'\nimport { canvasPreview } from './canvasPreview'\n\nimport 'react-image-crop/dist/ReactCrop.css'\n\n// This is to demonstate how to make and center a % aspect crop\n// which is a bit trickier so we use some helper functions.\nfunction centerAspectCrop(\n  mediaWidth,\n  mediaHeight,\n  aspect,\n) {\n  return centerCrop(\n    makeAspectCrop(\n      {\n        unit: '%',\n        width: 90,\n      },\n      aspect,\n      mediaWidth,\n      mediaHeight,\n    ),\n    mediaWidth,\n    mediaHeight,\n  )\n}\n\nfunction useDebounceEffect(\n  fn,\n  waitTime,\n  deps,\n) {\n  useEffect(() => {\n    const t = setTimeout(() => {\n      fn.apply(undefined, deps)\n    }, waitTime)\n\n    return () => {\n      clearTimeout(t)\n    }\n  }, deps)\n}\n\nfunction ImageUploader() {\n  const [imgSrc, setImgSrc] = useState('')\n  const previewCanvasRef = useRef(null)\n  const imgRef = useRef(null)\n  const [crop, setCrop] = useState()\n  const [completedCrop, setCompletedCrop] = useState()\n  const [scale, setScale] = useState(1)\n  const [rotate, setRotate] = useState(0)\n  const [aspect, setAspect] = useState(16 / 9)\n\n  function onSelectFile(e) {\n    if (e.target.files && e.target.files.length > 0) {\n      setCrop(undefined) // Makes crop preview update between images.\n      const reader = new FileReader()\n      reader.addEventListener('load', () =>\n        setImgSrc(reader.result?.toString() || ''),\n      )\n      reader.readAsDataURL(e.target.files[0])\n    }\n  }\n\n  function onImageLoad(e) {\n    if (aspect) {\n      const { width, height } = e.currentTarget\n      setCrop(centerAspectCrop(width, height, aspect))\n    }\n  }\n\n  useDebounceEffect(\n    async () => {\n      if (\n        completedCrop?.width &&\n        completedCrop?.height &&\n        imgRef.current &&\n        previewCanvasRef.current\n      ) {\n        // We use canvasPreview as it's much faster than imgPreview.\n        canvasPreview(\n          imgRef.current,\n          previewCanvasRef.current,\n          completedCrop,\n          scale,\n          rotate,\n        )\n      }\n    },\n    100,\n    [completedCrop, scale, rotate],\n  )\n\n  function handleToggleAspectClick() {\n    if (aspect) {\n      setAspect(undefined)\n    } else if (imgRef.current) {\n      const { width, height } = imgRef.current\n      setAspect(16 / 9)\n      setCrop(centerAspectCrop(width, height, 16 / 9))\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"Crop-Controls\">\n        <input type=\"file\" accept=\"image/*\" onChange={onSelectFile} />\n        <div>\n          <label htmlFor=\"scale-input\">Scale: </label>\n          <input\n            id=\"scale-input\"\n            type=\"number\"\n            step=\"0.1\"\n            value={scale}\n            disabled={!imgSrc}\n            onChange={(e) => setScale(Number(e.target.value))}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"rotate-input\">Rotate: </label>\n          <input\n            id=\"rotate-input\"\n            type=\"number\"\n            value={rotate}\n            disabled={!imgSrc}\n            onChange={(e) =>\n              setRotate(Math.min(180, Math.max(-180, Number(e.target.value))))\n            }\n          />\n        </div>\n        <div>\n          <button onClick={handleToggleAspectClick}>\n            Toggle aspect {aspect ? 'off' : 'on'}\n          </button>\n        </div>\n      </div>\n      {!!imgSrc && (\n        <ReactCrop\n          crop={crop}\n          onChange={(_, percentCrop) => setCrop(percentCrop)}\n          onComplete={(c) => setCompletedCrop(c)}\n          aspect={aspect}\n        >\n          <img\n            ref={imgRef}\n            alt=\"Crop me\"\n            src={imgSrc}\n            style={{ transform: `scale(${scale}) rotate(${rotate}deg)` }}\n            onLoad={onImageLoad}\n          />\n        </ReactCrop>\n      )}\n      <div>\n        {!!completedCrop && (\n          <canvas\n            ref={previewCanvasRef}\n            style={{\n              border: '1px solid black',\n              objectFit: 'contain',\n              width: completedCrop.width,\n              height: completedCrop.height,\n            }}\n          />\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default ImageUploader;"]},"metadata":{},"sourceType":"module"}