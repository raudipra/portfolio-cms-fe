{"ast":null,"code":"import _regeneratorRuntime from \"/Users/raudipra/Documents/Projects/Portfolio/portfolio-cms-fe/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/raudipra/Documents/Projects/Portfolio/portfolio-cms-fe/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { PixelCrop } from 'react-image-crop';\nvar TO_RADIANS = Math.PI / 180;\nexport function canvasPreview(_x, _x2, _x3) {\n  return _canvasPreview.apply(this, arguments);\n}\n\nfunction _canvasPreview() {\n  _canvasPreview = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(image, canvas, crop) {\n    var scale,\n        rotate,\n        ctx,\n        scaleX,\n        scaleY,\n        pixelRatio,\n        cropX,\n        cropY,\n        rotateRads,\n        centerX,\n        centerY,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            scale = _args.length > 3 && _args[3] !== undefined ? _args[3] : 1;\n            rotate = _args.length > 4 && _args[4] !== undefined ? _args[4] : 0;\n            ctx = canvas.getContext('2d');\n\n            if (ctx) {\n              _context.next = 5;\n              break;\n            }\n\n            throw new Error('No 2d context');\n\n          case 5:\n            scaleX = image.naturalWidth / image.width;\n            scaleY = image.naturalHeight / image.height; // devicePixelRatio slightly increases sharpness on retina devices\n            // at the expense of slightly slower render times and needing to\n            // size the image back down if you want to download/upload and be\n            // true to the images natural size.\n\n            pixelRatio = window.devicePixelRatio; // const pixelRatio = 1\n\n            canvas.width = Math.floor(crop.width * scaleX * pixelRatio);\n            canvas.height = Math.floor(crop.height * scaleY * pixelRatio);\n            ctx.scale(pixelRatio, pixelRatio);\n            ctx.imageSmoothingQuality = 'high';\n            cropX = crop.x * scaleX;\n            cropY = crop.y * scaleY;\n            rotateRads = rotate * TO_RADIANS;\n            centerX = image.naturalWidth / 2;\n            centerY = image.naturalHeight / 2;\n            ctx.save(); // 5) Move the crop origin to the canvas origin (0,0)\n\n            ctx.translate(-cropX, -cropY); // 4) Move the origin to the center of the original position\n\n            ctx.translate(centerX, centerY); // 3) Rotate around the origin\n\n            ctx.rotate(rotateRads); // 2) Scale the image\n\n            ctx.scale(scale, scale); // 1) Move the center of the image to the origin (0,0)\n\n            ctx.translate(-centerX, -centerY);\n            ctx.drawImage(image, 0, 0, image.naturalWidth, image.naturalHeight, 0, 0, image.naturalWidth, image.naturalHeight);\n            ctx.restore();\n\n          case 25:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _canvasPreview.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/raudipra/Documents/Projects/Portfolio/portfolio-cms-fe/components/Forms/canvasPreview.js"],"names":["PixelCrop","TO_RADIANS","Math","PI","canvasPreview","image","canvas","crop","scale","rotate","ctx","getContext","Error","scaleX","naturalWidth","width","scaleY","naturalHeight","height","pixelRatio","window","devicePixelRatio","floor","imageSmoothingQuality","cropX","x","cropY","y","rotateRads","centerX","centerY","save","translate","drawImage","restore"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,kBAA1B;AAEA,IAAMC,UAAU,GAAGC,IAAI,CAACC,EAAL,GAAU,GAA7B;AAEA,gBAAsBC,aAAtB;AAAA;AAAA;;;4EAAO,iBACLC,KADK,EAELC,MAFK,EAGLC,IAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAILC,YAAAA,KAJK,2DAIG,CAJH;AAKLC,YAAAA,MALK,2DAKI,CALJ;AAOCC,YAAAA,GAPD,GAOOJ,MAAM,CAACK,UAAP,CAAkB,IAAlB,CAPP;;AAAA,gBASAD,GATA;AAAA;AAAA;AAAA;;AAAA,kBAUG,IAAIE,KAAJ,CAAU,eAAV,CAVH;;AAAA;AAaCC,YAAAA,MAbD,GAaUR,KAAK,CAACS,YAAN,GAAqBT,KAAK,CAACU,KAbrC;AAcCC,YAAAA,MAdD,GAcUX,KAAK,CAACY,aAAN,GAAsBZ,KAAK,CAACa,MAdtC,EAeL;AACA;AACA;AACA;;AACMC,YAAAA,UAnBD,GAmBcC,MAAM,CAACC,gBAnBrB,EAoBL;;AAEAf,YAAAA,MAAM,CAACS,KAAP,GAAeb,IAAI,CAACoB,KAAL,CAAWf,IAAI,CAACQ,KAAL,GAAaF,MAAb,GAAsBM,UAAjC,CAAf;AACAb,YAAAA,MAAM,CAACY,MAAP,GAAgBhB,IAAI,CAACoB,KAAL,CAAWf,IAAI,CAACW,MAAL,GAAcF,MAAd,GAAuBG,UAAlC,CAAhB;AAEAT,YAAAA,GAAG,CAACF,KAAJ,CAAUW,UAAV,EAAsBA,UAAtB;AACAT,YAAAA,GAAG,CAACa,qBAAJ,GAA4B,MAA5B;AAEMC,YAAAA,KA5BD,GA4BSjB,IAAI,CAACkB,CAAL,GAASZ,MA5BlB;AA6BCa,YAAAA,KA7BD,GA6BSnB,IAAI,CAACoB,CAAL,GAASX,MA7BlB;AA+BCY,YAAAA,UA/BD,GA+BcnB,MAAM,GAAGR,UA/BvB;AAgCC4B,YAAAA,OAhCD,GAgCWxB,KAAK,CAACS,YAAN,GAAqB,CAhChC;AAiCCgB,YAAAA,OAjCD,GAiCWzB,KAAK,CAACY,aAAN,GAAsB,CAjCjC;AAmCLP,YAAAA,GAAG,CAACqB,IAAJ,GAnCK,CAqCL;;AACArB,YAAAA,GAAG,CAACsB,SAAJ,CAAc,CAACR,KAAf,EAAsB,CAACE,KAAvB,EAtCK,CAuCL;;AACAhB,YAAAA,GAAG,CAACsB,SAAJ,CAAcH,OAAd,EAAuBC,OAAvB,EAxCK,CAyCL;;AACApB,YAAAA,GAAG,CAACD,MAAJ,CAAWmB,UAAX,EA1CK,CA2CL;;AACAlB,YAAAA,GAAG,CAACF,KAAJ,CAAUA,KAAV,EAAiBA,KAAjB,EA5CK,CA6CL;;AACAE,YAAAA,GAAG,CAACsB,SAAJ,CAAc,CAACH,OAAf,EAAwB,CAACC,OAAzB;AACApB,YAAAA,GAAG,CAACuB,SAAJ,CACE5B,KADF,EAEE,CAFF,EAGE,CAHF,EAIEA,KAAK,CAACS,YAJR,EAKET,KAAK,CAACY,aALR,EAME,CANF,EAOE,CAPF,EAQEZ,KAAK,CAACS,YARR,EASET,KAAK,CAACY,aATR;AAYAP,YAAAA,GAAG,CAACwB,OAAJ;;AA3DK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { PixelCrop } from 'react-image-crop'\n\nconst TO_RADIANS = Math.PI / 180\n\nexport async function canvasPreview(\n  image,\n  canvas,\n  crop,\n  scale = 1,\n  rotate = 0,\n) {\n  const ctx = canvas.getContext('2d')\n\n  if (!ctx) {\n    throw new Error('No 2d context')\n  }\n\n  const scaleX = image.naturalWidth / image.width\n  const scaleY = image.naturalHeight / image.height\n  // devicePixelRatio slightly increases sharpness on retina devices\n  // at the expense of slightly slower render times and needing to\n  // size the image back down if you want to download/upload and be\n  // true to the images natural size.\n  const pixelRatio = window.devicePixelRatio\n  // const pixelRatio = 1\n\n  canvas.width = Math.floor(crop.width * scaleX * pixelRatio)\n  canvas.height = Math.floor(crop.height * scaleY * pixelRatio)\n\n  ctx.scale(pixelRatio, pixelRatio)\n  ctx.imageSmoothingQuality = 'high'\n\n  const cropX = crop.x * scaleX\n  const cropY = crop.y * scaleY\n\n  const rotateRads = rotate * TO_RADIANS\n  const centerX = image.naturalWidth / 2\n  const centerY = image.naturalHeight / 2\n\n  ctx.save()\n\n  // 5) Move the crop origin to the canvas origin (0,0)\n  ctx.translate(-cropX, -cropY)\n  // 4) Move the origin to the center of the original position\n  ctx.translate(centerX, centerY)\n  // 3) Rotate around the origin\n  ctx.rotate(rotateRads)\n  // 2) Scale the image\n  ctx.scale(scale, scale)\n  // 1) Move the center of the image to the origin (0,0)\n  ctx.translate(-centerX, -centerY)\n  ctx.drawImage(\n    image,\n    0,\n    0,\n    image.naturalWidth,\n    image.naturalHeight,\n    0,\n    0,\n    image.naturalWidth,\n    image.naturalHeight,\n  )\n\n  ctx.restore()\n}\n"]},"metadata":{},"sourceType":"module"}