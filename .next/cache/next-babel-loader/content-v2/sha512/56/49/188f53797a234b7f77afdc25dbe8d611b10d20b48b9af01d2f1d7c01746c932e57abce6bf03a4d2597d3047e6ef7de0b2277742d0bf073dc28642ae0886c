{"ast":null,"code":"import { PixelCrop } from 'react-image-crop';\nconst TO_RADIANS = Math.PI / 180;\nexport async function canvasPreview(image, canvas, crop, scale = 1, rotate = 0) {\n  const ctx = canvas.getContext('2d');\n\n  if (!ctx) {\n    throw new Error('No 2d context');\n  }\n\n  const scaleX = image.naturalWidth / image.width;\n  const scaleY = image.naturalHeight / image.height; // devicePixelRatio slightly increases sharpness on retina devices\n  // at the expense of slightly slower render times and needing to\n  // size the image back down if you want to download/upload and be\n  // true to the images natural size.\n\n  const pixelRatio = window.devicePixelRatio; // const pixelRatio = 1\n\n  canvas.width = Math.floor(crop.width * scaleX * pixelRatio);\n  canvas.height = Math.floor(crop.height * scaleY * pixelRatio);\n  ctx.scale(pixelRatio, pixelRatio);\n  ctx.imageSmoothingQuality = 'high';\n  const cropX = crop.x * scaleX;\n  const cropY = crop.y * scaleY;\n  const rotateRads = rotate * TO_RADIANS;\n  const centerX = image.naturalWidth / 2;\n  const centerY = image.naturalHeight / 2;\n  ctx.save(); // 5) Move the crop origin to the canvas origin (0,0)\n\n  ctx.translate(-cropX, -cropY); // 4) Move the origin to the center of the original position\n\n  ctx.translate(centerX, centerY); // 3) Rotate around the origin\n\n  ctx.rotate(rotateRads); // 2) Scale the image\n\n  ctx.scale(scale, scale); // 1) Move the center of the image to the origin (0,0)\n\n  ctx.translate(-centerX, -centerY);\n  ctx.drawImage(image, 0, 0, image.naturalWidth, image.naturalHeight, 0, 0, image.naturalWidth, image.naturalHeight);\n  ctx.restore();\n}","map":{"version":3,"sources":["/Users/raudipra/Documents/Projects/Portfolio/portfolio-cms-fe/components/Forms/canvasPreview.js"],"names":["PixelCrop","TO_RADIANS","Math","PI","canvasPreview","image","canvas","crop","scale","rotate","ctx","getContext","Error","scaleX","naturalWidth","width","scaleY","naturalHeight","height","pixelRatio","window","devicePixelRatio","floor","imageSmoothingQuality","cropX","x","cropY","y","rotateRads","centerX","centerY","save","translate","drawImage","restore"],"mappings":"AAAA,SAASA,SAAT,QAA0B,kBAA1B;AAEA,MAAMC,UAAU,GAAGC,IAAI,CAACC,EAAL,GAAU,GAA7B;AAEA,OAAO,eAAeC,aAAf,CACLC,KADK,EAELC,MAFK,EAGLC,IAHK,EAILC,KAAK,GAAG,CAJH,EAKLC,MAAM,GAAG,CALJ,EAML;AACA,QAAMC,GAAG,GAAGJ,MAAM,CAACK,UAAP,CAAkB,IAAlB,CAAZ;;AAEA,MAAI,CAACD,GAAL,EAAU;AACR,UAAM,IAAIE,KAAJ,CAAU,eAAV,CAAN;AACD;;AAED,QAAMC,MAAM,GAAGR,KAAK,CAACS,YAAN,GAAqBT,KAAK,CAACU,KAA1C;AACA,QAAMC,MAAM,GAAGX,KAAK,CAACY,aAAN,GAAsBZ,KAAK,CAACa,MAA3C,CARA,CASA;AACA;AACA;AACA;;AACA,QAAMC,UAAU,GAAGC,MAAM,CAACC,gBAA1B,CAbA,CAcA;;AAEAf,EAAAA,MAAM,CAACS,KAAP,GAAeb,IAAI,CAACoB,KAAL,CAAWf,IAAI,CAACQ,KAAL,GAAaF,MAAb,GAAsBM,UAAjC,CAAf;AACAb,EAAAA,MAAM,CAACY,MAAP,GAAgBhB,IAAI,CAACoB,KAAL,CAAWf,IAAI,CAACW,MAAL,GAAcF,MAAd,GAAuBG,UAAlC,CAAhB;AAEAT,EAAAA,GAAG,CAACF,KAAJ,CAAUW,UAAV,EAAsBA,UAAtB;AACAT,EAAAA,GAAG,CAACa,qBAAJ,GAA4B,MAA5B;AAEA,QAAMC,KAAK,GAAGjB,IAAI,CAACkB,CAAL,GAASZ,MAAvB;AACA,QAAMa,KAAK,GAAGnB,IAAI,CAACoB,CAAL,GAASX,MAAvB;AAEA,QAAMY,UAAU,GAAGnB,MAAM,GAAGR,UAA5B;AACA,QAAM4B,OAAO,GAAGxB,KAAK,CAACS,YAAN,GAAqB,CAArC;AACA,QAAMgB,OAAO,GAAGzB,KAAK,CAACY,aAAN,GAAsB,CAAtC;AAEAP,EAAAA,GAAG,CAACqB,IAAJ,GA7BA,CA+BA;;AACArB,EAAAA,GAAG,CAACsB,SAAJ,CAAc,CAACR,KAAf,EAAsB,CAACE,KAAvB,EAhCA,CAiCA;;AACAhB,EAAAA,GAAG,CAACsB,SAAJ,CAAcH,OAAd,EAAuBC,OAAvB,EAlCA,CAmCA;;AACApB,EAAAA,GAAG,CAACD,MAAJ,CAAWmB,UAAX,EApCA,CAqCA;;AACAlB,EAAAA,GAAG,CAACF,KAAJ,CAAUA,KAAV,EAAiBA,KAAjB,EAtCA,CAuCA;;AACAE,EAAAA,GAAG,CAACsB,SAAJ,CAAc,CAACH,OAAf,EAAwB,CAACC,OAAzB;AACApB,EAAAA,GAAG,CAACuB,SAAJ,CACE5B,KADF,EAEE,CAFF,EAGE,CAHF,EAIEA,KAAK,CAACS,YAJR,EAKET,KAAK,CAACY,aALR,EAME,CANF,EAOE,CAPF,EAQEZ,KAAK,CAACS,YARR,EASET,KAAK,CAACY,aATR;AAYAP,EAAAA,GAAG,CAACwB,OAAJ;AACD","sourcesContent":["import { PixelCrop } from 'react-image-crop'\n\nconst TO_RADIANS = Math.PI / 180\n\nexport async function canvasPreview(\n  image,\n  canvas,\n  crop,\n  scale = 1,\n  rotate = 0,\n) {\n  const ctx = canvas.getContext('2d')\n\n  if (!ctx) {\n    throw new Error('No 2d context')\n  }\n\n  const scaleX = image.naturalWidth / image.width\n  const scaleY = image.naturalHeight / image.height\n  // devicePixelRatio slightly increases sharpness on retina devices\n  // at the expense of slightly slower render times and needing to\n  // size the image back down if you want to download/upload and be\n  // true to the images natural size.\n  const pixelRatio = window.devicePixelRatio\n  // const pixelRatio = 1\n\n  canvas.width = Math.floor(crop.width * scaleX * pixelRatio)\n  canvas.height = Math.floor(crop.height * scaleY * pixelRatio)\n\n  ctx.scale(pixelRatio, pixelRatio)\n  ctx.imageSmoothingQuality = 'high'\n\n  const cropX = crop.x * scaleX\n  const cropY = crop.y * scaleY\n\n  const rotateRads = rotate * TO_RADIANS\n  const centerX = image.naturalWidth / 2\n  const centerY = image.naturalHeight / 2\n\n  ctx.save()\n\n  // 5) Move the crop origin to the canvas origin (0,0)\n  ctx.translate(-cropX, -cropY)\n  // 4) Move the origin to the center of the original position\n  ctx.translate(centerX, centerY)\n  // 3) Rotate around the origin\n  ctx.rotate(rotateRads)\n  // 2) Scale the image\n  ctx.scale(scale, scale)\n  // 1) Move the center of the image to the origin (0,0)\n  ctx.translate(-centerX, -centerY)\n  ctx.drawImage(\n    image,\n    0,\n    0,\n    image.naturalWidth,\n    image.naturalHeight,\n    0,\n    0,\n    image.naturalWidth,\n    image.naturalHeight,\n  )\n\n  ctx.restore()\n}\n"]},"metadata":{},"sourceType":"module"}